<tool id="tpp_xinteract" name="TPP Xinteract" version="@WRAPPER_VERSION@.0">
    <description>process pep.xml datasets</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="stdio" />
    <command><![CDATA[
        ## xinteract -Ninteract-LongSwath_UPS1_1ug_rep1_Q1.pep.xml LongSwath_UPS1_1ug_rep1_Q1.tandem.pep.xml
        ##
        ## mkdir gx_path &&
        #if $merging.merge_inputs == 'yes':
          xinteract ' '.join($merging.inputs.split(','))
          #echo ''
        #else:
          #set $pepxml_in = $merging.input.name
          #if not $pepxml_in.endswith('.pep.xml'):
            #set $pepxml_in = $pepxml_in + '.pep.xml'
          #end if
          export XML_ONLY=1;
          ln -s "$merging.input"  $pepxml_in && 
          xinteract  -OA -OE -OP -Od -D${database_path} -d${decoy_tag} -PPM -N${prefix}${merging.input.name} $pepxml_in  && 
          cp ${prefix}${merging.input.name} $output
        #end if
    ]]></command>
    <inputs>
        <param type="hidden" name="prefix" value="interact-" label="output file prefix" />
        <conditional name="merging">
            <param type="select" name="merge_inputs" label="Merge inputs">
               <option value="no">no</option>
               <option value="yes">yes</option>
            </param>
            <when value="yes">
              <param type="data" name="inputs" format="pepxml" multiple="true" label="pep.xml ipnuts" />
            </when>
            <when value="no">
              <param type="data" name="input" format="pepxml" label="pep.xml ipnuts" />
            </when>
        </conditional>
        <param name="database_path" type="data"  format="fasta" label="fasta search database" />
        <param name="decoy_tag" type="text"  value="rev" label="search database decoy tag" />
    </inputs>
    <outputs>
        <!--
        <data name="image_html" format="html" label="${prefix}${input.name}">
        </data>
        <data name="output" format="pepxml" label="${prefix}${input.name}" >
        </data>
        -->
	<data name="output" format="pepxml" label="${prefix}${merging.input.name}" />
    </outputs>
    <help><![CDATA[
         xinteract (TPP v4.8.0 PHILAE, Build 201504131436-exported (1-x86_64))


 usage: xinteract (generaloptions) (-Oprophetoptions) (-iiprophetoptions) (-Mptmprophetoptions) (-Xxpressoptions) (-Aasapoptions) (-L<conditionfile>libraoptions) xmlfile1 xmlfile2 ....

 generaloptions:
            For developers:
                 -t  [run regression test against a previously derived result]
                 -t! [learn results for regression test]
                 -t# [run regression test, do not stop on test failure]

            For users:
                 -Nmyfile.pep.xml [write output to file 'myfile.pep.xml']
                 -R fix protein names in OMSSA data
                 -G record collision energy in pepXML
                 -V record compensation voltage (FAIMS) in pepXML
                 -PREC record precursor intensity in pepXML
                 -nI [do not run Interact (convert to pepXML only)]
                 -nP [do not run PeptideProphet]
                 -nR [do not run get all proteins corresponding to degenerate peptides from database]
                 -p0 [do not discard search results with PeptideProphet probabilities below 0.05]
                 -x<num> [number of extra PeptideProphet interations; default <num>=20]
                 -I<num> [ignore charge <num>+]
                 -d<tag> [use decoy hits to pin down the negative distribution.
                          the decoy protein names must begin with <tag> (whitespace is not allowed)]
                 -D<database_path> [specify path to database]
                 -c<conservative_level> [specify how conservative the model is to be in number of standard deviations from negative mean 
                                         to allow positive model to cover (default 0, higher is more conservative)]
                 -PPM [use PPM instead of daltons in Accurate Mass Model]
                 -E<experiment_label> [used to commonly label all spectra belonging to one experiment (required by iProphet)]
                 -l<num> [minimum peptide length considered in the analysis (default 7)]
                 -T<database type> [specify 'AA' for amino acid, 'NA' for nucleic acid (default 'AA')]
                 -a<data_path> [specify absolute path to data directory]
                 -p<num> [filter results below PeptideProphet probability <num>; default <num>=0.05]
                 -mw [calculate protein molecular weights]
                 -MONO [calculate monoisotopic peptide masses during conversion to pepXML]
                 -AVE [calculate average peptide masses during conversion to pepXML]
                 -THREADS=<num> [specify maximum number of threads to use]
                 -eX [specify sample enzyme]
                     -eT [specify sample enzyme = Trypsin]
                     -eS [specify sample enzyme = StrictTrypsin]
                     -eC [specify sample enzyme = Chymotrypsin]
                     -eR [specify sample enzyme = RalphTrypsin]
                     -eA [specify sample enzyme = AspN]
                     -eG [specify sample enzyme = GluC]
                     -eB [specify sample enzyme = GluC Bicarb]
                     -eM [specify sample enzyme = CNBr]
                     -eD [specify sample enzyme = Trypsin/CNBr]
                     -e3 [specify sample enzyme = Chymotrypsin/AspN/Trypsin]
                     -eE [specify sample enzyme = Elastase]
                     -eK [specify sample enzyme = LysC / Trypsin_K (cuts after K not before P)]
                     -eL [specify sample enzyme = LysN (cuts before K)]
                     -eP [specify sample enzyme = LysN Promisc (cuts before KASR)]
                     -eN [specify sample enzyme = Nonspecific or None]

 PeptideProphet options [following the '-O']:
                 i [use icat information in PeptideProphet]
                 f [do not use icat information in PeptideProphet]
                 g [use N-glyc motif information in PeptideProphet]
                 H [use Phospho information in PeptideProphet]
                 m [maldi data]
                 I [use pI information in PeptideProphet]
                 R [use Hydrophobicity / RT information in PeptideProphet]
                 F [force the fitting of the mixture model, bypass automatic mixture model checks]
                 A [use accurate mass binning in PeptideProphet]
                 w [warning instead of exit with error if instrument types between runs is different]
                 x [exclude all entries with asterisked score values in PeptideProphet]
                 l [leave alone all entries with asterisked score values in PeptideProphet]
                 n [use hardcoded default initialization parameters of the distributions]
                 P [use Non-parametric model, can only be used with decoy option]
                 N [do not use the NTT model]
                 M [do not use the NMC model]
                 k [do not use the mass model]
                 o [optimize f-value function f(dot,delta) using PCA (applies only to SpectraST)]
                 G [use Gamma Distribution to model the Negatives (applies only to X!Tandem data)]
                 E [only use Expect Score as the Discriminant(applies only to X!Tandem data, 
                    helpful for data with homologous top hits e.g. phospho or glyco)]
                 d [report decoy hits with a computed probability based on the model learned]
                 p [run ProteinProphet afterwards]
                 t [do not create png data plot]
                 u [do not assemble protein groups in ProteinProphet analysis]
                 s [do not use Occam's Razor in ProteinProphet analysis to 
                    derive the simplest protein list to explain observed peptides]

 iProphet options [run iProphet on the PeptideProphet result with options that follow the '-i']:
                 p [run ProteinProphet on the iProphet results]
                 P [do not use number of sibling peptides model]
                 R [do not use number replicate spectra model]
                 I [do not use number sibling ions model]
                 M [do not use number sibling mods model]
                 S [do not use numbe of sibling searches model]
                 E [do not use number of sibling MS/MS runs model]

 PTMProphet options [run PTMProphet on the iProphet result with options that follow the '-M' (e.g. -M-STY,79.9663-MZTOL=0.4)]:
                 -{<amino acids, n, or c>,<mass_shift>,...}  [specify mod masses (e.g. -STY,79.9663,K,114.0429,M,15.9949)] 
                 -MZTOL=<number>                             [Use specified +/- mz tolerance on site specific ions (default=0.1 dalton)] 
                 -NOUPDATE                                   [Don't update modification_info tags in pepXML] 

 xpressoptions [will run XPRESS analysis with any specified options that follow the '-X']: 
                 -m<num>        change XPRESS mass tolerance (default=1.0)
                 -a             tolerance specified by -m is in ppm (default=Daltons)
                 -n<str>,<num>  change XPRESS residue mass difference for <str> to <num> (default=9.0)
                 -b             heavy labeled peptide elutes before light labeled partner
                 -F<num>        fix elution peak area as +-<num> scans (<num> optional, default=5) from peak apex
                 -c<num>        change minimum number of chromatogram points needed for quantitation (default=5)
                 -p<num>        number of 13C isotopic peaks to add to precursor chromatogram (default=1)
                 -L             for ratio, set/fix light to 1, vary heavy
                 -H             for ratio, set/fix heavy to 1, vary light
                 -M             for 15N metabolic labeling; ignore all other parameters, assume
                                IDs are normal and quantify w/corresponding 15N heavy pair
                 -N             for 15N metabolic labeling; ignore all other parameters, assume
                                IDs are 15N heavy and quantify w/corresponding 14N light pair
                 -O             for 13C metabolic labeling; ignore all other parameters, assume
                                IDs are normal and quantify w/corresponding 13C heavy pair
                 -P             for 13C metabolic labeling; ignore all other parameters, assume
                                IDs are 13C heavy and quantify w/corresponding 12C light pair
                 -i             also export intensities and intensity based ratio
                 -l             label free mode: stats on precursor ions only, no ratios
                                only relevant label-free parameters are -m, -c, and -p

 asapoptions [will run ASAPRatio analysis with any specified options that follow the '-A']: 
                 -l<str>    change labeled residues (default='C')
                 -b         heavy labeled peptide elutes before light labeled partner
                 -r<num>    range around precusor m/z to search for peak (default 0.5)
                 -f<num>    areaFlag set to num (ratio display option)
                 -S         static modification quantification (i.e. each run is either
                            all light or all heavy)
                 -F         use fixed scan range for light and heavy
                 -C         quantitate only the charge state where the CID was made
                 -B         return a ratio even if the background is high
                 -Z         set all background to zero
                 -m<str>    specified label masses (e.g. M74.325Y125.864), only relevant for 
                            static modification quantification 

 libraoptions [will run Libra Quantitation analysis with any specified options that follow the '-L']: 
 refreshparser options (disabled by -nR switch)
                 -PREV_AA_LEN=<length>   set the number of previous AAs recorded for a peptide hit (default 1)
                 -NEXT_AA_LEN=<length>   set the number of following AAs recorded for a peptide hit (default 1)
                 -RESTORE_NONEXISTENT_IF_PREFIX=<str>  for proteins which starts with <str> and not found in refresh database,
                                                       keep original protein names instead of NON_EXISTENT

 examples: 
 xinteract *.pep.xml [combines together data in all pepXML files into 'interact.pep.xml', then runs PeptideProphet]
 xinteract -Ndata.pep.xml *.pep.xml [same as above, but results are written to 'data.pep.xml']
 xinteract -Ndata.pep.xml -X -Op *.pep.xml [same as above, but run XPRESS analysis in its default mode, then
      ProteinProphet]
 xinteract -X -A file1.pep.xml file2.pep.xml [combines together data in file1.pep.xml and file2.pep.xml into 'interact.pep.xml'
      and then runs XPRESS (in its default mode) and ASAPRatio (in its default mode)]
 xinteract -X-nC,6.0 -A file1.pep.xml file2.pep.xml [same as above, but specifies that cysteine label has a heavy/light
      mass difference of 6.0]
 xinteract -X -A-lDE-S file1.pep.xml file2.pep.xml [sampe as above, but specifies for ASAP to run in static mode 
                                            with labeled residues D and E]
 xinteract -Lmyconditionfile.xml -Op file1.pep.xml file2.pep.xml [run libra quantitiation after PeptideProphet using myconditionfile.xml
------------------------------------------------------------------------------------------------------------

    ]]></help>
    <expand macro="citations" />
</tool>
