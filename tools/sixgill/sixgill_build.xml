<tool id="sixgill_build" name="sixgill build" version="@version@.0">
    <description>Build a metapeptide database from metagenome fastq files</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <version_command>sixgill_build --version</version_command>
    <expand macro="stdio" />
    <command><![CDATA[
        sixgill_build 
            --out=metagene_output_db.tsv.gz
            #if 'fa' in str($metagene_outputs):
                --outfasta=metagene_output.fa
            #end if
            #if str($sec_filter.minlength) != '':
                --minlength=$sec_filter.minlength
            #end if
            #if str($sec_filter.minqualscore) != '':
                --minqualscore=$sec_filter.minqualscore
            #end if
            #if str($sec_filter.minorflength) != '':
                --minorflength=$sec_filter.minorflength
            #end if
            #if str($sec_filter.minlongesttryppeplen) != '':
                --minlongesttryppeplen=$sec_filter.minlongesttryppeplen
            #end if
            #if str($sec_filter.minreadcount) != '':
                --minreadcount=$sec_filter.minreadcount
            #end if
            #if str($sec_filter.maxreads) != '':
                --maxreads=$sec_filter.maxreads
            #end if
            #if $sec_mg.metagenefile:
                --metagenefile="$sec_mg.metagenefile"    
                #if str($sec_mg.minmetagenescore) != 'None':
                    --minmetagenescore=$sec_mg.minmetagenescore
                #end if
            #end if
            #for (i,fastqfile) in enumerate($fastqfiles):
              "$fastqfile"
            #end for
    ]]></command>
    <inputs>
        <param name="fastqfiles" type="data" format="fastq" multiple="true" optional="false" label="metagenomic fastq files" 
         help=""/>
        <section name="sec_filter" expanded="false" title="filter">
            <param name="minlength" type="integer" value="10" min="0" optional="true" label="minlength"
                help="min AA length of a metapeptide"/>
            <param name="minqualscore" type="integer" value="30" min="0" optional="true" label="minqualscore"
                help="min base-call phred score across any NT in a metapeptide"/>
            <param name="minorflength" type="integer" value="40" min="0" optional="true" label="minorflength"
                help="min length of ORF-portion"/>
            <param name="minlongesttryppeplen" type="integer" value="7" min="0" optional="true" label="minlongesttryppeplen"
                help="minimum length of the longest tryptic peptide"/>
            <param name="minreadcount" type="integer" value="2" min="1" optional="true" label="minreadcount"
                help="minimum read count"/>
            <param name="maxreads" type="integer" value="" optional="true" label="maxreads"
                help="stop early if we hit this many reads"/>
        </section>
        <section name="sec_mg" expanded="false" title="MetaGene Annotator">
            <param name="metagenefile" type="data" format="metapeptides.tsv.gz" optional="true" label="metagenefile"
                help="MetaGene Annotator output file. Records must be in same linear order as reads in fastqfiles"/>
            <param name="minmetagenescore" type="integer" value="" min="-1" optional="true" label="minmetagenescore"
                help="minimum MetaGene score"/>
        </section>
        <param name="metagene_outputs" type="select" multiple="true" optional="false" label="select outputs">
            <option value="db" selected="true">metapeptide database</option>
            <option value="fa" selected="true">metapeptide protein fasta</option>
        </param>
    </inputs>
    <outputs>
        <data name="output_db" format="metagene" label="metagene.tsv.gz" from_work_dir="metagene_output_db.tsv.gz">
            <filter>'db' in metagene_outputs</filter>
        </data>
        <data name="output_fa" format="fasta" label="metagene.fa" from_work_dir="metagene_output.fa">
            <filter>'fa' in metagene_outputs</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <param name="fastqfiles" ftype="fastq" value="small.fq.gz"/>
            <param name="minreadcount" value="1"/>
            <param name="metagene_outputs" value="fa"/>
            <output name="output_fa">
                <assert_contents>
                    <has_text text="DLRILLRERLVAGDSDEAAVDFIVDR" />
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
        usage: sixgill_build [-h] [--minlength MINLENGTH]
                     [--minqualscore MINQUALSCORE]
                     [--metagenefile METAGENEFILE]
                     [--minmetagenescore MINMETAGENESCORE]
                     [--minorflength MINORFLENGTH]
                     [--minlongesttryppeplen MINLONGESTTRYPPEPLEN]
                     [--maxreads MAXREADS] [--minreadcount MINREADCOUNT] --out
                     OUT [--outfasta OUTFASTA] [--debug]
                     fastqfiles [fastqfiles ...]

Read in one or more fastq files. For each read, do a 6-frame translation and
add all metapeptides that pass the specified filtering criteria. If
--metagenefile is specified, start with the output of MetaGene Annotator
instead of raw reads.

positional arguments:
  fastqfiles            input fastq file(s), bgzipped

optional arguments:
  -h, --help            show this help message and exit
  --minlength MINLENGTH
                        min AA length of a metapeptide
  --minqualscore MINQUALSCORE
                        min base-call phred score across any NT in a
                        metapeptide
  --metagenefile METAGENEFILE
                        input MetaGene Annotator output file. Records must be
                        in same linear order as reads in fastqfiles
  --minmetagenescore MINMETAGENESCORE
                        minimum MetaGene score
  --minorflength MINORFLENGTH
                        min length of ORF-portion
  --minlongesttryppeplen MINLONGESTTRYPPEPLEN
                        minimum length of the longest tryptic peptide
  --maxreads MAXREADS   stop early if we hit this many reads
  --minreadcount MINREADCOUNT
                        minimum read count
  --out OUT             Output metapeptide database file
  --outfasta OUTFASTA   Output metapeptide fasta database file
  --debug               Enable debug logging

    ]]></help>
    <expand macro="citations" />
</tool>
