<tool id="sixgill_makefasta" name="sixgill makefasta" version="@version@.0">
    <description>Build a metapeptide database from metagenome fastq files</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="stdio" />
    <version_command>sixgill_makefasta --version</version_command>
    <command><![CDATA[
        sixgill_makefasta 
            --out=metagene_output.fa
            --type="$fa_type.fasta_type"
            #if $fa_type.fasta_type == 'peptide':
                --missedcleavages=$fa_type.missedcleavages
                --minpeptidelength=$fa_type.minpeptidelength
            #end if
            "$metagene_input_db"
    ]]></command>
    <inputs>
        <param name="metagene_input_db" type="data" format="metapeptides.tsv.gz" label="metagene database" 
         help="Can be generated with sixgill_build"/>
        <conditional name="fa_type">
            <param name="fasta_type" type="select" label="fasta type">
                <help> peptide, with specified missed cleavages requires holding
                       all peptides in the database in memory, as each is only written once
                </help>
                <option value="aa" selected="true">aa - amino acid</option>
                <option value="peptide">peptide - with specified missed cleavages</option>
            </param>
            <when value="aa"/>
            <when value="peptide">
                <param name="missedcleavages" type="integer" value="0" min="0" max="6" label="missedcleavages"/>
                <param name="minpeptidelength" type="integer" value="7" min="1" label="minpeptidelength"/>
            </when>
        </conditional>
        
    </inputs>
    <outputs>
        <data name="output_fa" format="fasta" label="metagene.fa" from_work_dir="metagene_output.fa"/>
    </outputs>
    <tests>
        <test>
            <param name="metagene_input_db" ftype="metapeptides.tsv.gz" value="testdb_metagene.metapeptides.gz"/>
            <param name="fasta_type" value="aa"/>
            <output name="output_fa">
                <assert_contents>
                    <has_text text="DLRILLRERLVAGDSDEAAVDFIVDR" />
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
usage: sixgill_makefasta [-h] --out OUT --type {aa,peptide}
                         [--missedcleavages MISSEDCLEAVAGES]
                         [--minpeptidelength MINPEPTIDELENGTH] [--debug]
                         metapeptidedbfile

Build a fasta database from a metapeptide database. Either nucleotide or amino
acid.

positional arguments:
  metapeptidedbfile     input metapeptide database file

optional arguments:
  -h, --help            show this help message and exit
  --out OUT             output file
  --type {aa,peptide}   database type
  --missedcleavages MISSEDCLEAVAGES
                        missed cleavages (for type peptide only)
  --minpeptidelength MINPEPTIDELENGTH
                        minimum peptide length (for type peptide only)
  --debug               Enable debug logging

    ]]></help>
    <expand macro="citations" />
</tool>
